{"version":3,"sources":["webpack:///./src/pages/404.tsx","webpack:///(webpack)/buildin/global.js"],"names":["global","location","g","this","Function","e","window","module","exports"],"mappings":"6FAQA,mBAAe,4BAAOA,EAAOC,SAAW,M,yCCRxC,IAAIC,EAGJA,EAAI,WACH,OAAOC,KADJ,GAIJ,IAECD,EAAIA,GAAK,IAAIE,SAAS,cAAb,GACR,MAAOC,GAEc,iBAAXC,SAAqBJ,EAAII,QAOrCC,EAAOC,QAAUN","file":"component---src-pages-404-tsx-d26762de07671ac8d450.js","sourcesContent":["declare global {\n  namespace NodeJS {\n    interface Global {\n      location: string;\n    }\n  }\n}\n\nexport default () => (global.location = '/');\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}