{"version":3,"sources":["webpack:///./src/pages/404.tsx","webpack:///(webpack)/buildin/global.js"],"names":["global","location","g","this","Function","e","window","module","exports"],"mappings":"6FAQA,mBAAe,4BAAOA,EAAOC,SAAW,M,yCCRxC,IAAIC,EAEJA,EAAI,WACF,OAAOC,KADL,GAIJ,IAEED,EAAIA,GAAK,IAAIE,SAAS,cAAb,GACT,MAAOC,GAEe,iBAAXC,SAAqBJ,EAAII,QAMtCC,EAAOC,QAAUN","file":"component---src-pages-404-tsx-f1f7126f91832014360b.js","sourcesContent":["declare global {\n  namespace NodeJS {\n    interface Global {\n      location: string;\n    }\n  }\n}\n\nexport default () => (global.location = '/');\n","var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;"],"sourceRoot":""}